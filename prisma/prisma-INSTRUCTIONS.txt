$ npm i -D prisma
added 2 packages, and audited 218 packages in 6s

=====================================================
$ npx prisma

Prisma is a modern DB toolkit to query, migrate and model your database (https://prisma.io)    

Usage

  $ prisma [command]

Commands

            init   Set up Prisma for your app
        generate   Generate artifacts (e.g. Prisma Client)
              db   Manage your database schema and lifecycle
         migrate   Migrate your database
          studio   Browse your data with Prisma Studio
        validate   Validate your Prisma schema
          format   Format your Prisma schema

Flags

     --preview-feature   Run Preview Prisma commands

Examples

  Set up a new Prisma project
  $ prisma init

  Generate artifacts (e.g. Prisma Client)
  $ prisma generate

  Browse your data
  $ prisma studio

  Create migrations from your Prisma schema, apply them to the database, generate artifacts (e.g. Prisma Client)
  $ prisma migrate dev

  Pull the schema from an existing database, updating the Prisma schema
  $ prisma db pull

  Push the Prisma schema state to the database
  $ prisma db push

  Validate your Prisma schema
  $ prisma validate

  Format your Prisma schema
  $ prisma format

=====================================================
$ npx prisma init

✔ Your Prisma schema was created at prisma/schema.prisma
  You can now open it in your favorite editor.

warn You already have a .gitignore file. Don't forget to add `.env` in it to not commit any private information.

Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run prisma db pull to turn your database schema into a Prisma schema.
4. Run prisma generate to generate the Prisma Client. You can then start querying your database.

More information in our documentation:
https://pris.ly/d/getting-started

=====================================================
$ npm install @prisma/client

Notice that the @prisma/client node module references a folder named .prisma/client. The .prisma/client folder contains your generated Prisma client, and is modified each time you change the schema and run the following command:

	This command reads your Prisma schema and generates your Prisma Client library
	$ npx prisma generate
	Environment variables loaded from .env
	Prisma schema loaded from prisma\schema.prisma

	✔ Generated Prisma Client (4.10.1 | library) to .\node_modules\@prisma\client in 121ms
	You can now start using Prisma Client in your code. Reference: https://pris.ly/d/client        

	```
	import { PrismaClient } from '@prisma/client'
	const prisma = new PrismaClient()
	```

	Create migrations from your Prisma schema, apply them to the database, generate artifacts (e.g. Prisma Client)
	$ prisma migrate dev

	Pull the schema from an existing database, updating the Prisma schema
	$ prisma db pull

	Push the Prisma schema state to the database
	$ prisma db push


=====================================================
Relation queries
https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#create-a-related-record

Prisma Client API Reference
https://www.prisma.io/docs/reference/api-reference/prisma-client-reference

Data Model
https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

Data Model Queries (CRUD)
https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#queries-crud


